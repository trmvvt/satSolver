Boolean Satisfability problem:
Implement SAT solvers to find a satisfying assignment for any given CNF sentences. Firstly, you need to implement a modified version of the PL-Resolution algorithm. Modifications are necessary because we are using the algorithm for a slightly different purpose than is explained in AIMA. Here, we are not looking to prove entailment of a particular query. Rather, we hope to prove satisfiability. Thus, there is no need to add negated query clauses to the input clauses. In other words, the only input to the algorithm is the set of clauses that comprise a randomly generated sentence. As an additional consequence of our purpose, the outputs will be reversed compared to the outputs listed in AIMAâ€™s pseudo code. That is to say, if the empty clause is derived at any point from the clauses of the input sentence, then the sentence is unsatisfiable. In the opposite situation where the empty clause is never derived, the algorithm should return true, indicating that the sentence is satisfiable.
You are also asked to implement the WalkSAT algorithm. There are two open parameters associated with WalkSAT: <p> and <max_flips>.
PL-Resolution is a sound and complete algorithm that it can be used to determine satisfiability and unsatisfiability with certainty. On the other hand, WalkSAT can determine satisfiability (if it finds a model), but it cannot absolutely determine unsatisfiability.
